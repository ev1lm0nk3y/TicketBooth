- form_action_name = action_name == 'edit' ? :update : :create
= form_for @ticket_request,
           url: { controller: :ticket_requests, action: form_action_name } do |f|
  = render 'shared/form_errors', resource: @ticket_request

  = f.hidden_field :event_id, value: @event.id

  - if @user
    %h3 Ticket Request for #{@user.name}
  - else
    = f.fields_for :user, @ticket_request.user || User.new do |ff|
      %p
        Already requested a ticket?
        = link_to 'Sign in', new_user_session_path
      = ff.label :name, 'Full Name', class: 'required-label'
      = ff.text_field :name, class: 'input-xlarge',
        maxlength: User::MAX_NAME_LENGTH, required: true,
        placeholder: 'First and last name'

      = ff.label :email, class: 'required-label' do
        Email (username)
      = ff.email_field :email, class: 'input-xlarge',
        maxlength: User::MAX_EMAIL_LENGTH, required: true,
        placeholder: 'email@example.com'

      = ff.label :password, 'Create Password', class: 'required-label'
      = ff.password_field :password,
        required: true,
        maxlength: User::MAX_PASSWORD_LENGTH, class: 'input-xlarge'

  %fieldset
    %p
      = f.label :role_volunteer do
        How are you contributing to the campout this year?
      = f.label :role_volunteer, class: 'radio inline' do
        = f.radio_button :role, TicketRequest::ROLE_VOLUNTEER,
          data: { 'max-tickets' => TicketRequest::TICKET_LIMITS[TicketRequest::ROLE_VOLUNTEER] }
        = TicketRequest::ROLES[TicketRequest::ROLE_VOLUNTEER]
      = f.label :role_contributor, class: 'radio inline' do
        = f.radio_button :role, TicketRequest::ROLE_CONTRIBUTOR,
          data: { 'max-tickets' => TicketRequest::TICKET_LIMITS[TicketRequest::ROLE_CONTRIBUTOR] }
        = TicketRequest::ROLES[TicketRequest::ROLE_CONTRIBUTOR]
      = f.label :role_coordinator, class: 'radio inline' do
        = f.radio_button :role, TicketRequest::ROLE_COORDINATOR,
          data: { 'max-tickets' => TicketRequest::TICKET_LIMITS[TicketRequest::ROLE_COORDINATOR] }
        = TicketRequest::ROLES[TicketRequest::ROLE_COORDINATOR]
      = f.label :role_uber_coordinator, class: 'radio inline' do
        = f.radio_button :role, TicketRequest::ROLE_UBER_COORDINATOR,
          data: { 'max-tickets' => TicketRequest::TICKET_LIMITS[TicketRequest::ROLE_UBER_COORDINATOR] }
        = TicketRequest::ROLES[TicketRequest::ROLE_UBER_COORDINATOR]
      = f.label :role_other, class: 'radio inline' do
        = f.radio_button :role, TicketRequest::ROLE_OTHER,
          data: { 'max-tickets' => TicketRequest::TICKET_LIMITS[TicketRequest::ROLE_OTHER] }
        = TicketRequest::ROLES[TicketRequest::ROLE_OTHER]
    %p.muted.role-explanation{ class: TicketRequest::ROLE_VOLUNTEER }
      I plan to help out by working one or more shifts at the event
    %p.muted.role-explanation.hidden{ class: TicketRequest::ROLE_CONTRIBUTOR }
      I am bringing gear, driving trucks, leading the cooking of a meal, etc.
    %p.muted.role-explanation.hidden{ class: TicketRequest::ROLE_COORDINATOR }
      I am listed on the coordinator sheet
    %p.muted.role-explanation.hidden{ class: TicketRequest::ROLE_UBER_COORDINATOR }
      I have done a lot of work both off-season and in-season to make this event happen
    = f.text_area :role_explanation, class: 'input-xlarge hidden',
      placeholder: 'Briefly describe your role (required)',
      rows: 2, maxlength: 200, required: false

  = f.label :previous_contribution, 'What was your role last year?'
  = f.text_area :previous_contribution, class: 'input-xlarge',
      rows: 2, maxlength: 250

  - if signed_in? && @event.admin?(current_user) && form_action_name == 'edit'
    .well
      = f.label :special_price, 'Special Ticket Price ($)'
      %p.text-error
        Editable by event admins only. Leave blank to use default price.
      = f.number_field :special_price, class: 'input-small', min: 0

  = f.label :adults, 'Number of tickets'
  = f.number_field :adults, class: 'input-mini', min: 1, required: true,
    max: (TicketRequest::TICKET_LIMITS[TicketRequest::ROLE_VOLUNTEER] unless form_action_name == :update),
    data: { default_price: @event.adult_ticket_price.to_i }
  %span.help-inline.inline-price

  - if @event.kid_ticket_price
    = f.label :kids do
      Number of children you are bringing with you (not transferable to adults; babes in arms are free)
      = help_mark help_text_for(:kids)
    = f.number_field :kids, class: 'input-mini', min: 0,
      max: @event.max_kid_tickets_per_request,
      data: { default_price: @event.kid_ticket_price.to_i,
              custom_prices: price_rules_to_json(@event) }
    %span.help-inline.inline-price
    %p.help-inline-block.muted
      Please include the ages of the children (including infants) you are
      bringing with you in the notes below.

  - if @event.cabin_price
    = f.label :cabins do
      How many cabins did you want?
      = help_mark help_text_for(:cabins)
    = f.number_field :cabins, class: 'input-mini', min: 0,
      max: @event.max_cabins_per_request,
      data: { default_price: @event.cabin_price.to_i },
      disabled: !@event.cabins_available?
    %span.help-inline.inline-price
      - unless @event.cabins_available?
        Sorry, we are sold out of cabins at this point in time.

  %p
    = f.label :car_camping do
      = f.check_box :car_camping
      I’m considering car camping or an RV spot
  = f.text_area :car_camping_explanation, class: 'input-xlarge hidden',
    placeholder: 'Short explanation of why you would need a car/RV camping spot',
    rows: 2, maxlength: 200, required: false

  .control-group

  - if @event.allow_financial_assistance
    = f.label :needs_assistance, class: 'checkbox' do
      = f.check_box :needs_assistance
      I’m requesting financial assistance with purchasing my ticket(s)
      = help_mark help_text_for(:needs_assistance)

  .control-group

  - if @event.require_mailing_address
    %fieldset
      = f.label :address_line1, class: 'required-label' do
        Address
        = help_mark help_text_for(:address)
      = f.text_field :address_line1, required: true, class: 'input-xlarge',
        placeholder: 'Street address, P.O. box, etc.',
        maxlength: 200
      %br
      = f.text_field :address_line2, class: 'input-xlarge',
        placeholder: 'Apartment, suite, unit, building, floor, etc.',
        maxlength: 200
      = f.label :city, 'City', class: 'required-label'
      = f.text_field :city, required: true, maxlength: 50, class: 'input-xlarge'
      = f.label :state, 'State/Province/Region', class: 'required-label'
      = f.text_field :state, required: true, class: 'input-xlarge',
                     maxlength: 50
      = f.label :zip_code, 'Zip/Postal Code', class: 'required-label'
      = f.text_field :zip_code, required: true, maxlength: 32, class: 'input-small'
      = f.label :country_code, 'Country', class: 'required-label'
      = f.country_select :country_code, %w[US CA GB], iso_codes: true

  = f.label :notes do
    Any special requests or things you want to mention?
  = f.text_area :notes, class: 'input-xxlarge',
    rows: 3, maxlength: 500

  - if signed_in? && @event.admin?(current_user) && form_action_name == :update
    .well
      = f.label :admin_notes do
        Additional Notes
      %p.text-error
        Visible by event admins only.
      = f.text_area :admin_notes, class: 'input-xxlarge', rows: 5, maxlength: 512

  .actions
    - submit_btn_text = form_action_name == :update ? 'Update Request' : 'Submit Request'
    = f.submit submit_btn_text, class: 'btn btn-primary btn-large',
               data: { disable_with: 'Submitting...' }
